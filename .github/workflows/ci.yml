name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nn_seca_tms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          **/node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build shared types
      run: npm run build --workspace=shared
    
    - name: Lint code
      run: npm run lint
    
    - name: Test server
      run: npm run test --workspace=server
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: nn_seca_tms_test
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        NODE_ENV: test
    
    - name: Test client
      run: npm run test --workspace=client
    
    - name: Build applications
      run: npm run build

  security:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: |
        echo "Running security audit for server (production dependencies)..."
        npm audit --audit-level=moderate --workspace=server
        echo "Running security audit for shared (production dependencies)..."
        npm audit --audit-level=moderate --workspace=shared
        echo "Checking client for high/critical vulnerabilities only (development dependencies)..."
        npm audit --audit-level=high --workspace=client || echo "Client has moderate dev-only vulnerabilities - see SECURITY.md for details"
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker-compose build --no-cache
    
    - name: Test Docker setup
      run: |
        docker-compose up -d
        sleep 30
        docker-compose ps
        docker-compose down 